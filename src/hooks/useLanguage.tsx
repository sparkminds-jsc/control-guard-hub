import { createContext, useContext, useState, useEffect, ReactNode } from 'react';

interface Language {
  code: string;
  name: string;
  flag: string;
}

interface LanguageContextType {
  currentLanguage: Language;
  setLanguage: (language: Language) => void;
  t: (key: string) => string;
}

const languages: Language[] = [
  { code: 'en', name: 'English', flag: 'üá∫üá∏' },
  { code: 'vi', name: 'Ti·∫øng Vi·ªát', flag: 'üáªüá≥' },
];

const translations = {
  en: {
    'nav.framework': 'Generate Control Framework',
    'nav.history': 'Control Framework',
    'nav.company_info': 'Company Info Feedback',
    'nav.company_laws': 'Company Laws Feedback', 
    'nav.company_control': 'Company Control Feedback',
    'button.export': 'Export to Excel',
    'button.view_details': 'View Details',
    'button.verify': 'Verify',
    'button.unverify': 'Unverify',
    'status.verified': 'Verified',
    'status.unverified': 'Unverified',
    'table.no': 'No.',
    'table.law_regulation': 'Law/Regulation',
    'table.domain': 'Domain',
    'table.activity': 'Activity',
    'table.market': 'Market',
    'table.country': 'Country Applied',
    'table.risk_management': 'Risk Management',
    'table.referral_source': 'Referral Source',
    'table.context': 'Context',
    'table.description': 'Description',
    'table.created_at': 'Created At',
    'table.status': 'Status',
    'table.actions': 'Actions',
    'title.laws_regulations': 'Laws and Regulations',
    'title.company_info': 'Company Information',
    'loading': 'Loading...',
    'no_data': 'No data available',
  },
  vi: {
    'nav.framework': 'T·∫°o Khung Ki·ªÉm So√°t',
    'nav.history': 'L·ªãch S·ª≠ Khung Ki·ªÉm So√°t',
    'nav.company_info': 'Ph·∫£n H·ªìi Th√¥ng Tin C√¥ng Ty',
    'nav.company_laws': 'Ph·∫£n H·ªìi Lu·∫≠t C√¥ng Ty',
    'nav.company_control': 'Ph·∫£n H·ªìi Ki·ªÉm So√°t C√¥ng Ty',
    'button.export': 'Xu·∫•t Excel',
    'button.view_details': 'Xem Chi Ti·∫øt',
    'button.verify': 'X√°c Minh',
    'button.unverify': 'H·ªßy X√°c Minh',
    'status.verified': 'ƒê√£ X√°c Minh',
    'status.unverified': 'Ch∆∞a X√°c Minh',
    'table.no': 'STT',
    'table.law_regulation': 'Lu·∫≠t/Quy ƒê·ªãnh',
    'table.domain': 'Lƒ©nh V·ª±c',
    'table.activity': 'Ho·∫°t ƒê·ªông',
    'table.market': 'Th·ªã Tr∆∞·ªùng',
    'table.country': 'Qu·ªëc Gia √Åp D·ª•ng',
    'table.risk_management': 'Qu·∫£n L√Ω R·ªßi Ro',
    'table.referral_source': 'Ngu·ªìn Gi·ªõi Thi·ªáu',
    'table.context': 'B·ªëi C·∫£nh',
    'table.description': 'M√¥ T·∫£',
    'table.created_at': 'Ng√†y T·∫°o',
    'table.status': 'Tr·∫°ng Th√°i',
    'table.actions': 'H√†nh ƒê·ªông',
    'title.laws_regulations': 'Lu·∫≠t v√† Quy ƒê·ªãnh',
    'title.company_info': 'Th√¥ng Tin C√¥ng Ty',
    'loading': 'ƒêang t·∫£i...',
    'no_data': 'Kh√¥ng c√≥ d·ªØ li·ªáu',
  },
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider = ({ children }: { children: ReactNode }) => {
  const [currentLanguage, setCurrentLanguage] = useState<Language>(() => {
    const savedLang = localStorage.getItem('app-language');
    return languages.find(lang => lang.code === savedLang) || languages[0];
  });

  const setLanguage = (language: Language) => {
    setCurrentLanguage(language);
    localStorage.setItem('app-language', language.code);
  };

  const t = (key: string): string => {
    return translations[currentLanguage.code as keyof typeof translations]?.[key as keyof typeof translations.en] || key;
  };

  useEffect(() => {
    localStorage.setItem('app-language', currentLanguage.code);
  }, [currentLanguage]);

  return (
    <LanguageContext.Provider value={{ currentLanguage, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

export { languages };